import torch
import torch.nn as nn

class UNet(nn.Module):
    def __init__(self):
        super(UNet, self).__init__()
        # Contracting path      
        self.convC11 = nn.Conv2d(1, 64, 3, padding='same')
        nn.init.kaiming_normal_(self.convC11.weight)
        self.bnC11 = nn.BatchNorm2d(64)        
        self.reluC11 = nn.ReLU() 
        self.convC12 = nn.Conv2d(64, 64, 3, padding='same')
        nn.init.kaiming_normal_(self.convC12.weight)
        self.bnC12 = nn.BatchNorm2d(64)
        self.reluC12 = nn.ReLU() 
        self.dropC1 = nn.Dropout(0.3)
        self.poolC1 = nn.MaxPool2d(kernel_size=2)

        self.convC21 = nn.Conv2d(64, 128, 3, padding='same')
        nn.init.kaiming_normal_(self.convC21.weight)
        self.bnC21 = nn.BatchNorm2d(128)        
        self.reluC21 = nn.ReLU() 
        self.convC22 = nn.Conv2d(128, 128, 3, padding='same')
        nn.init.kaiming_normal_(self.convC22.weight)
        self.bnC22 = nn.BatchNorm2d(128)
        self.reluC22 = nn.ReLU() 
        self.dropC2 = nn.Dropout(0.3)
        self.poolC2 = nn.MaxPool2d(kernel_size=2)

        self.convC31 = nn.Conv2d(128, 256, 3, padding='same')
        nn.init.kaiming_normal_(self.convC31.weight)
        self.bnC31 = nn.BatchNorm2d(256)
        self.reluC31 = nn.ReLU() 
        self.convC32 = nn.Conv2d(256, 256, 3, padding='same')
        nn.init.kaiming_normal_(self.convC32.weight)
        self.bnC32 = nn.BatchNorm2d(256)
        self.reluC32 = nn.ReLU() 
        self.dropC3 = nn.Dropout(0.3)
        self.poolC3 = nn.MaxPool2d(kernel_size=2)

        self.convC41 = nn.Conv2d(256, 512, 3, padding='same')
        nn.init.kaiming_normal_(self.convC41.weight)
        self.bnC41 = nn.BatchNorm2d(512)
        self.reluC41 = nn.ReLU() 
        self.convC42 = nn.Conv2d(512, 512, 3, padding='same')
        nn.init.kaiming_normal_(self.convC42.weight)
        self.bnC42 = nn.BatchNorm2d(512)
        self.reluC42 = nn.ReLU() 
        self.dropC4 = nn.Dropout(0.3)
        self.poolC4 = nn.MaxPool2d(kernel_size=2)
  
        self.convC51 = nn.Conv2d(512, 1024, 3, padding='same')
        nn.init.kaiming_normal_(self.convC51.weight)
        self.bnC51 = nn.BatchNorm2d(1024)
        self.reluC51 = nn.ReLU() 
        self.convC52 = nn.Conv2d(1024, 512, 3, padding='same')
        nn.init.kaiming_normal_(self.convC52.weight)
        self.bnC52 = nn.BatchNorm2d(512)
        self.reluC52 = nn.ReLU() 
        self.dropC5 = nn.Dropout(0.3)
        
        #Expanding path
        self.upsamp4 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.convE41 = nn.Conv2d(1024, 512, 3, padding='same')
        nn.init.kaiming_normal_(self.convE41.weight)
        self.bnE41 = nn.BatchNorm2d(512)
        self.reluE41 = nn.ReLU() 
        self.convE42 = nn.Conv2d(512, 256, 3, padding='same')
        nn.init.kaiming_normal_(self.convE42.weight)
        self.bnE42 = nn.BatchNorm2d(256)
        self.reluE42 = nn.ReLU() 
        self.dropE4 = nn.Dropout(0.3)
        
        self.upsamp3 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.convE31 = nn.Conv2d(512, 256, 3, padding='same')
        nn.init.kaiming_normal_(self.convE31.weight)
        self.bnE31 = nn.BatchNorm2d(256)
        self.reluE31 = nn.ReLU() 
        self.convE32 = nn.Conv2d(256, 128, 3, padding='same')
        nn.init.kaiming_normal_(self.convE32.weight)
        self.bnE32 = nn.BatchNorm2d(128)
        self.reluE32 = nn.ReLU() 
        self.dropE3 = nn.Dropout(0.3)
        
        self.upsamp2 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.convE21 = nn.Conv2d(256, 64, 3, padding='same')
        nn.init.kaiming_normal_(self.convE21.weight)
        self.bnE21 = nn.BatchNorm2d(64)
        self.reluE21 = nn.ReLU() 
        self.convE22 = nn.Conv2d(64, 64, 3, padding='same')
        nn.init.kaiming_normal_(self.convE22.weight)
        self.bnE22 = nn.BatchNorm2d(64)
        self.reluE22 = nn.ReLU() 
        self.dropE2 = nn.Dropout(0.3)

        self.upsamp1 = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
        self.convE11 = nn.Conv2d(128, 64, 3, padding='same')
        nn.init.kaiming_normal_(self.convE11.weight)
        self.bnE11 = nn.BatchNorm2d(64)
        self.reluE11 = nn.ReLU() 
        self.convE12 = nn.Conv2d(64, 64, 3, padding='same')
        nn.init.kaiming_normal_(self.convE12.weight)
        self.bnE12 = nn.BatchNorm2d(64)
        self.reluE12 = nn.ReLU() 
        self.dropE1 = nn.Dropout(0.3)
        
        self.convOut1 = nn.Conv2d(64, 2, 3, padding='same')
        self.reluOut1 = nn.ReLU() 
        self.convOut2 = nn.Conv2d(2, 1, 1, padding='same')
        self.sigmoid = nn.Sigmoid()
        
    
    def forward(self, x):
        x = self.convC11(x)
        x = self.bnC11(x)        
        x = self.reluC11(x)        
        x = self.convC12(x)
        x = self.bnC12(x)
        x_cat1 = self.reluC12(x)        
        x = self.dropC1(x_cat1)
        x = self.poolC1(x)
        
        x = self.convC21(x)
        x = self.bnC21(x)        
        x = self.reluC21(x)        
        x = self.convC22(x)
        x = self.bnC22(x)
        x_cat2 = self.reluC22(x)        
        x = self.dropC2(x_cat2)
        x = self.poolC2(x)
        
        x = self.convC31(x)
        x = self.bnC31(x)        
        x = self.reluC31(x)        
        x = self.convC32(x)
        x = self.bnC32(x)
        x_cat3 = self.reluC32(x)        
        x = self.dropC3(x_cat3)
        x = self.poolC3(x)
        
        x = self.convC41(x)
        x = self.bnC41(x)        
        x = self.reluC41(x)        
        x = self.convC42(x)
        x = self.bnC42(x)
        x_cat4 = self.reluC42(x)        
        x = self.dropC4(x_cat4)
        x = self.poolC4(x)

        x = self.convC51(x)
        x = self.bnC51(x)
        x = self.reluC51(x)
        x = self.convC52(x)
        x = self.bnC52(x)
        x = self.reluC52(x)
        x = self.dropC5(x)

        # EXPANDING PATH
        # cat and then upsamp
        x = self.upsamp4(x)
        x = torch.cat((x_cat4, x), dim=1)
        x = self.convE41(x)
        x = self.bnE41(x)
        x = self.reluE41(x)
        x = self.convE42(x)
        x = self.bnE42(x)
        x = self.reluE42(x)
        x = self.dropE4(x)

        x_ = self.upsamp3(x) # torch.Size([16, 512, 24, 64])
        x = torch.cat((x_cat3, x_), dim=1) #torch.Size([16, 768, 24, 64])
        x = self.convE31(x) 
        x = self.bnE31(x) 
        x = self.reluE31(x)
        x = self.convE32(x)
        x = self.bnE32(x)
        x = self.reluE32(x)
        x = self.dropE3(x)

        x = self.upsamp2(x)
        x = torch.cat((x_cat2, x), dim=1)
        x = self.convE21(x)
        x = self.bnE21(x)
        x = self.reluE21(x)
        x = self.convE22(x)
        x = self.bnE22(x)
        x = self.reluE22(x)
        x = self.dropE2(x)

        x = self.upsamp1(x)
        x = torch.cat((x_cat1, x), dim=1)
        x = self.convE11(x)
        x = self.bnE11(x)
        x = self.reluE11(x)
        x = self.convE12(x)
        x = self.bnE12(x)
        x = self.reluE12(x)
        x = self.dropE1(x)

        x = self.convOut1(x)
        x = self.reluOut1(x)
        x = self.convOut2(x)
        x = self.sigmoid(x)
        
        return x    
    
    
if __name__ == "__main__":
    batch = torch.zeros((16, 96, 256, 1))
    batch = torch.permute(batch, (0, 3, 1, 2))
    model = UNet()
    batch_out = model(batch)